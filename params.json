{"name":"Js-hash.js","tagline":"hash;hash table;hash-table;","body":"#JS-Hash.js\r\n\r\njs-hash.js is a utility module which provide functions for operating with hash-table. It can be used both in the [node.js](http://nodejs.org) and browser.\r\n\r\n##Download\r\n\r\nThe source code is available for download from [GitHub](https://github.com/rranauro/js-lookup). Besides that, you can also install using Node Package Manager [npm](https://npmjs.org):\r\n\r\n    npm install js-hash\r\n\r\n##Documentation\r\n\r\n* [hashUtils.Hash](#hashUtils.Hash)\r\n* [set](#set)\r\n* [get](#get)\r\n* [contains](#contains)\r\n* [post](#post)\r\n* [getLength](#getLength)\r\n* [remove](#remove)\r\n* [each](#each)\r\n* [keys](#keys)\r\n* [first](#first)\r\n* [update](#update)\r\n* [pick](#pick)\r\n* [restore](#restore)\r\n* [empty](#empty)\r\n\r\n<a name=\"hashUtils.Hash\" />\r\n### hashUtils.Hash(object)\r\n\r\nInitialize and return a hash table with the given values object.\r\n\r\n__Example:__\r\n\r\n    var hash = hashUtils.Hash({'a': 'yes!', 'b': 'no!'});\r\n    \r\n__Result:__\r\n\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n  <tr>\r\n    <td>a</td><td>yes!</td>\r\n  </tr>\r\n  <tr>\r\n    <td>b</td><td>no!</td>\r\n  </tr>\r\n</table>\r\n\r\n<a name=\"set\" />\r\n### set(key, value)\r\n\r\nSet the new value to the given key. If the given key does not exist in the hash table, add this new key-value pair to the hash table.\r\n\r\n__Alias:__ store\r\n\r\n\r\n__Example:__\r\n\r\n    hash.set('c', '123');\r\n    hash.set('a', '1');\r\n      \r\n__Result:__\r\n\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n  <tr>\r\n    <td>a</td><td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>b</td><td>no!</td>\r\n  </tr>\r\n  <tr>\r\n    <td>c</td><td>123</td>\r\n  </tr>\r\n</table>\r\n<a name=\"get\" />\r\n### get(key)\r\n\r\nReturn the value based on the given key. If the given key does not exist in the hash table, return undefined.\r\n\r\n__Alias:__ lookup; find\r\n\r\n\r\n__Example:__\r\n\r\n    hash.get('c');\r\n    \r\n__Result:__\r\n\r\n    123\r\n    \r\n<a name=\"contains\" />\r\n### contains(key)\r\n\r\nIf the key exists in the hash table, return true; if the key does not exist in the hash table, return false.\r\n\r\n__Example:__\r\n\r\n    hash.contains('c');\r\n    \r\n__Result:__\r\n\r\n    true\r\n    \r\n<a name=\"post\" />\r\n### post(argument)\r\n\r\nIf there is no argument, return the values object of the hash table; if the argument is an object, replace the old values object with the new one and return the new values object.\r\n\r\n__Example:__\r\n\r\n    hash.post({'a':1, 'b':2, 'd':3 });\r\n    \r\n__Result:__\r\n\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n  <tr>\r\n    <td>a</td><td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>b</td><td>2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>d</td><td>3</td>\r\n  </tr>\r\n</table>\r\n<a name=\"getLength\" />\r\n### getLength()\r\n\r\nReturn the total number of the items in the hash table.\r\n\r\n__Example:__\r\n\r\n    hash.getLength();\r\n    \r\n__Result:__\r\n\r\n    3  \r\n    \r\n<a name=\"remove\" />\r\n### remove(key)\r\n\r\nIf the given key exists in the hash table, delete the items from the hash table based on the given key and return the hash table. If the given key does not exist in the hash table, return the hash table.\r\n\r\n__Example:__\r\n\r\n    hash.remove('a');\r\n  \r\n__Result:__\r\n\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n  <tr>\r\n    <td>b</td><td>2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>d</td><td>3</td>\r\n  </tr>\r\n</table>\r\n<a name=\"each\" />\r\n### each()\r\n\r\nReturn the values of the hash table as an array.\r\n\r\n__Example:__\r\n\r\n    hash.each();\r\n\r\n__Result:__\r\n\r\n    {2,3}   \r\n    \r\n<a name=\"keys\" />\r\n### keys()\r\n\r\nReturn the keys of the hash table as an array.\r\n\r\n__Example:__\r\n\r\n    hash.keys();  \r\n    \r\n__Result:__\r\n\r\n    {b,d} \r\n    \r\n<a name=\"first\" />\r\n### first()\r\n\r\nReturn the value of the first item in the hash table.\r\n\r\n__Example:__\r\n\r\n    hash.first();  \r\n   \r\n__Result:__\r\n\r\n    2\r\n\r\n<a name=\"update\" />\r\n### update(object)\r\n\r\nBulk update the values object of the hast table.\r\n\r\n__Example:__\r\n\r\n    hash.update({'a':100, 'd':900 });  \r\n\r\n__Result:__\r\n\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n  <tr>\r\n    <td>b</td><td>2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>d</td><td>900</td>\r\n  </tr>\r\n  <tr>\r\n    <td>a</td><td>100</td>\r\n  </tr>\r\n</table>\r\n<a name=\"pick\" />\r\n### pick(argument)\r\n\r\nReturns an object containing only the selected keys. Argument can be an array of strings or separate argument strings.\r\n\r\n__Example:__\r\n\r\n    hash.pick(['a','b']);\r\n    hase.pick('a','b');\r\n    \r\n__Result:__\r\n    {'a': 100, 'b': 2}    \r\n    \r\n<a name=\"restore\" />\r\n### restore()\r\n\r\nReturns the object values to its original state.\r\n\r\n__Example:__\r\n\r\n    hash.restore();\r\n \r\n__Result:__\r\n\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n  <tr>\r\n    <td>a</td><td>yes!</td>\r\n  </tr>\r\n  <tr>\r\n    <td>b</td><td>no!</td>\r\n  </tr>\r\n</table>\r\n<a name=\"empty\" />\r\n### empty()\r\n\r\nEmpty the hast table.\r\n\r\n__Example:__\r\n\r\n    hash.empty();\r\n    \r\n__Result:__\r\n<table>\r\n  <caption>Hash Table</caption>\r\n  <tr>\r\n    <th>Key</th><th>Value</th>\r\n  </tr>\r\n</table>\r\n\r\n   \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}